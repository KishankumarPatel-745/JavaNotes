package com.jvmArch.scjp;

public class Java08 {
    public static void main(String[] args) {
        /*
        Full JVM architecture..

        Refer image for full JVM architecture..

        class file structure.

        classFile{
            magic_number;
            minor_version;
            major_version;
            constant_pool_count;
            constant_pool[];
            access_flags;
            this_class;
            super_class;
            interface_count;
            interface[];
            fields_count;
            fields[];
            methods_count;
            methods[];
            attributes_count;
            attributes[];
        }

        1,magic_number;

        the first four bytes of class file is magic number. this is a predefine value used by JVM to identify .class file generated by valid compiler or not.

        The value should be oXCAFEBABE.

        NOTE..
        Whenever we are executing a java class, if jvm is unable to find valid magic number then we will get RTE saying java.lang.ClassFormatError:Incompatible magic value.

        2, minor_version and major_version
         major and minor version represents .class file version.

         JVM will use these version to identify, which version of compiler generates the current .class file.

        M.m := M is major version and m is minor version.

        1.5version :- 49.0
        1.6version :- 50.0
        1.7version :- 51.0

        NOTE.

        lower version compiler generated .class file can be run by higher version JVM.

        But higher version compiler generated .class file cannot be run by lower version JVM.

        If we are trying to run, we will get RTE saying java.lang.UnsupportedClassVersionError:Test.


        eg.
        javac 1.6v ==> java 1.7v  valid

        javac 1.7v ==> java 1.6v   not valid

        RTE: java.lang.UnsupportedClassVersionError.


        4. constant_pool_count;
        it represent number of constant present in constant pool.

        5,constant_pool[];
        It represent information about constant present in constant pool.
        
        6.access_flags;
        It provides information about modifier,which are declared to the class.

        7.this_class;
        It represent fully qualified name of the class.

        8,super_class;
        It represent fully qualified name of the immediate super class of current class.

        Test.class

        this_class: Test
        super_class:Object


        9,interface_count
        it returns number of interfaces implemented by current class.

        10,interface[];
        it returns interfaces information implemented by current class.

        11,fields_count;
        it represent number of fields present in current class.

        12,fields[];
        it represent fields information present in current class.

        13,methods_count;
        It represent number of methods present in current class.

        14,methods[];
        It provide information about methods present in current class.
        
        15,attributes_count;
        It returns number of attribute present in current class.

        16,attributes[];
        It provide information about all attribute present in current class.

        javap -verbose Test.class.
        to get the complete profile of the class/

        



        
        */
    }
    
}
