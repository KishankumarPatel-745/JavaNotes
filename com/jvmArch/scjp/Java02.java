package com.jvmArch.scjp;

public class Java02 {
    /*
    Class loading Subsystem.

    1, Loading
    2, Linking 
    3, Initialization.

    Linking..
    1, Verify
    2, Prepare
    3, resolve 

    Linking consists of 3 activities.
    1, Verify
    2, Prepare
    3, resolve 


    1, Verify.
    It is a process of ensuring that binary representation of a class is structurely correct or not.
    That is JVM is check whether .class file generated by valid compiler or not.
    Means whether .class file properly formated or not.

    Internally ByteCode verifier is responsible for this activity.

    Bytecode verifier is the part of class loader subsystem.
    If the verification fails then we will get RTE saying Java.lang.VerifyError.

    2, Preparation.

    In this phase, JVM is allocate memory for class level static variable and assign default value.

    In initialization phase, Original value will be assigned the static variable.
    And here only default value will be assigned.

    3, Resolve.
    It is a process of replacing symbolic names in our program with original memory references from method area.

    eg.
    class Test{
        main(){
            String s=new String("kishan");
            Student s=new Student();
        }
    }

    For the above class, class loader loads Test.class, Object.class, String.class, Student.class.

    The names of this classes are stored in constant pool of Test class.
    In resolution phase, these names are replaced with original memory level references from method area.


    Initialization.

    In this all static variables are assigned with original value and static blocks will be executed from parent to child and from top to bottom.

    refer class loader subsystem diagram..

    NOte..
    While loading, linking and initialization if any error occurs then we will get RTE saying java.lang.LinkageError.

    Types of class loader.

    Class loader subsystem contains the following three types of class loader.

    1, Bootstrap class loader/ Primordial class loader.

    2, Extension class loader.

    3, Application class loader/System class loader 

    1, Bootstrap class loader.

    Bootstrap classloader is responsible to load core java API classes, that is the classes present in rt.jar.

    JDK/JRE/lib/rt.jar


    JDK/JRE/lib is location is called BootStrap classpath.
    That is Bootstrap classloader is responsible to load classes from Bootstrap classpath.

    BootStrap class loader is bydefault available in every jvm.
    It is implemented in native languages like c/cpp and not implemented in java.

    Extension class loader.
    Extension class loader is child class of bootstrap class loader.


    BootstrapCL <---ExtensionCL
    Extension class loader is responsible to load classes from extension classPath.
    
    JDK/JRE/lib/ext.

    Extension class loader is implemented in java and corresponding .class file is sun.misc.Launcher$ExtClassLoader.class.

    Application class loader /System class loader.

    BootstrapCL <-- ExtensionCL <-- ApplicationCL

    Application classload is child class of extension class loader.
    This classloader is responsible to load classes from application classpath.

    It internally usage environment variable classpath.

    Applicatio class loader is implemented in java and corresponding .class file is sun.misc.Launcher$AppClassLoader.class. 






    */
    
}
