package com.multiThreading.scjp;

/**
 * Java03
 */
public class Java03 {
    public static void main(String[] args) {
        /*
        Defining a thread by implementing runnable interface.

        We can define a Thread by implemeanting runnable interface.
        
        Runnable(I)-->MyRunnable(C).

        Runnable interface present in Java.Lang package.
        And it contains only one method.
        public void run();

        class MyRunnable implements Runnable{
            public void run(){
                for(int i=0;i<10;i++){
                    SOP("CHild statement:- ",i);
                }//Executed by child Thread.
            }
        }//Defining a Thread.

        and Code inside a run() method is called Job of a Thread.

        class ThreadDemo{
            main(){
                MyRunnable r=new MyRunnable();

                Thread t=new Thread(r);
                //r:- Target Runnable
                t.start();
                for(int i=0;i<10;i++){
                    SOP("Main statement:- ",i);
                }//Executed by Main Thread.
            }
        }

        We will get mixed output and we cannot tell exact output.

        CASE Study:

        MyRunnable r=new MyRunnable();
        Thread t1=new Thread();
        Thread t2=new Thread(r);

        Case01:
        t1.start();
        A new thread will be created,which is responsible for the execution of Thread class run method,which has empty implementation.

        Case02:
        t1.run();
        No new Thread will be created and Thread class run method will be executed just like a normal method call.

        Case03:
        t2.start();
        A new thread will be created which is responsible for the execution of MyRunnable class run method.

        Case04
        t2.run();
        A new Thread won't be created and MYRunnable run method will be executed,just like a normal method call.

        Case05:
        r.start();
        We will get CTW saying MyRunnable class doesn't have start capability.

        CTE:Cannot find symbol
        symbol:method start()
        location:class MyRunnable.

        Case06:
        r.run();
        No new Thread will be created and MyRunnable run method will be executed like normal method call.

        Which approach is best to define a Thread?

        Amonf two ways of defining a Thread implements Runnable approach is recommaended.

        In first approach,our class always extends Thread class.There is no chance of extending any other class.Hence we are missing inheritance benefit.

        But in the second approach, while implementing runnable interface, we can extend any other class hence we won't miss any inheritance benefit.
        Because of above reason, implementing runnable interface approach is recommaneded then extending Thread class.

        Thread Class Constructor.

        1, Thread t=new Thread();

        2, Thread t=new Thread(Runnable r);

        3, Thread t=new Thread(String name);

        4, Thread t=new Thread(Runnable r,String name);

        5, Thread t=new Thread(ThreadGroup g,String name);
        6, Thread t=new Thread(ThreadGroup g,Runnable r);
        7, Thread t=new Thread(ThreadGroup g,Runnable r,String name);
        8, Thread t=new Thread(ThreadGroup g,Runnable r,String name,long stackSize);

        Durga's Approach to define a thread not recommaned to use.

        class MyThread extends Thread{
            public void run(){
                SOP("Child Thread");
            }
        }
        class ThreadDemo{
            main(){
                MyThread t=new MyThread();
                Thread t1=new Thread(t);
                t1.start();
                SOP("Main Thread");
            }
        }
        output:
        Child Thread
        Main Thread 
         or

        Main Thread
        Child Thread


        Getting and Setting name of a Thread.

        Every Thread in Java has some name, it maybe default name generated by JVM or Customized name provided by programmer.

        We can get and set Name of a Thread by using the following two methods of Thread Class.

        public final String getName();

        public final void setName(String name);

        eg.
        class Test{
            main(){
                SOP(Thread.currentThread().getName());

                MyThread t=new MyThread();

                SOP(t.getName());///Thread-0

                Thread.currentThread().setName("Pawan Kalyan");

                SOP(Thread.currentThread().getName());
                //Pawan Kalyan

            }
        }
        We can get current executing thread object by using Thread.currentThread().

        class MyThread extends Thread{
            public void run(){
                SOP("run method Thread: "+Thread.currentThread().getName());
            }
        }
        class Test{
            main(){
                MyThread y=new Thread();
                t.start();
                SOP("Main method Thread: "+Thread.currentThread().getName());
                
            }
        }

        o/p
        Main method Thread: main
        run method Thread: Thread-0




        */
    }
}